-------Task 1.1 – Revenue Analysis
----Calculate the total revenue generated by each country

WITH RevPerCountry AS (
    SELECT c.Country, SUM(i.Total) AS Revenue
    FROM Invoice i
    JOIN Customer c ON i.customer_id = c.customer_id
    GROUP BY c.Country
)
SELECT 
    c.Country,
    SUM(i.Total) AS Revenue,
    ROUND((SUM(i.Total) / (SELECT SUM(Total) FROM Invoice)) * 100, 2) AS RevenuePct
FROM Invoice i
JOIN Customer c ON i.customer_id = c.customer_id
GROUP BY c.Country
ORDER BY Revenue DESC;

--------Task 1.2 – Customer Segmentation
------Identify the top 10 customers based on total spend.

WITH customer_spend AS (
    SELECT
        c.customer_id,
        c.first_name || ' ' || c.last_name AS customer_name,
        SUM(i.Total) AS total_spend,
        RANK() OVER (ORDER BY SUM(i.Total) DESC) AS customer_rank
    FROM Invoice i
    JOIN Customer c ON i.customer_id = c.customer_id
    GROUP BY c.Customer_id
)
SELECT
    customer_name,
    total_spend,
    customer_rank
FROM customer_spend
WHERE customer_rank <= 10;

-------Task 1.3 – Track Popularity
----Find the top 10 most purchased tracks.

SELECT 
    t.name,
    COUNT(inl.invoice_line_id) AS Invoice_count
FROM Invoice_Line inl
JOIN Track t ON inl.track_id = t.track_id
GROUP BY t.track_id, t.name
ORDER BY Invoice_count DESC
LIMIT 10;


----Task 1.4 – Popularity Over Time
----Find the top 5 most popular tracks per month.

WITH MonthlyPopularity AS (
    SELECT 
        TO_CHAR(inv.Invoice_Date, 'YYYY-MM') AS Month, 
        t.name AS track_name, 
        COUNT(inl.invoice_line_id) AS count_monthly_purchase, 
        DENSE_RANK() OVER (PARTITION BY TO_CHAR(inv.Invoice_Date, 'YYYY-MM') 
                     ORDER BY COUNT(inl.Invoice_Line_Id) DESC) AS popularity_rank
    FROM invoice inv
    INNER JOIN invoice_Line inl ON inv.invoice_Id = inl.invoice_Id
    JOIN Track t ON inl.track_id = t.track_id
    GROUP BY TO_CHAR(inv.invoice_date, 'YYYY-MM'), t.track_id, t.name
)
SELECT Month, track_name, count_monthly_purchase
FROM MonthlyPopularity
WHERE popularity_rank <= 5;


----Task 1.5 – Employee Sales Performance
----Identify top-performing sales representatives.
SELECT 
    e.employee_id, 
	e.title,
    e.first_name || ' ' || e.last_name AS employee_name, 
    SUM(inv.Total) AS sales_revenue
FROM Invoice inv
INNER JOIN customer c ON inv.customer_id = c.customer_id
INNER JOIN employee e ON c.support_rep_Id = e.employee_id
GROUP BY e.employee_id, e.first_name, e.last_name
ORDER BY sales_revenue DESC;

------Task 1.6 – Churn Prediction
-----Identify customers who haven't purchased in 6+ months.

WITH churn_list AS (
    SELECT customer_id, MAX(invoice_date) AS churn_list
    FROM invoice inv
    GROUP BY Customer_Id
)
SELECT 
    c.customer_id, 
    c.first_name || ' ' || c.last_name AS customer_name, 
    cl.churn_list, 
    EXTRACT(DAY FROM (CURRENT_DATE - cl.churn_list)) AS inactive_days, 
    COUNT(inv.Invoice_id) AS past_purchases, 
    COALESCE(SUM(inv.total), 0) AS total_spent
FROM Customer c
JOIN churn_list cl ON c.customer_id = cl.customer_id
LEFT JOIN invoice inv ON c.customer_id = inv.customer_id
WHERE EXTRACT(DAY FROM (CURRENT_DATE - cl.churn_list)) > 180
GROUP BY c.customer_id, cl.churn_list;

-----------Task 1.8 – Recommendation System
---------Find customers with similar music taste.
-- Customer similarity based on track purchases

WITH TrackPurchases AS (
    SELECT customer_id, track_id
	FROM invoice_line il
    JOIN invoice i ON il.Invoice_Id = i.invoice_id
),
Similarity AS (
    SELECT 
        a.customer_id AS customer1, 
        b.customer_id AS customer2,
        COUNT(DISTINCT a.track_id) AS common_tracks
    FROM TrackPurchases a
    JOIN TrackPurchases b ON a.Track_Id = b.Track_Id AND a.Customer_Id <> b.Customer_Id
    GROUP BY a.Customer_Id, b.Customer_Id
)
SELECT customer1, customer2, common_tracks
FROM Similarity
ORDER BY common_tracks DESC
LIMIT 5;